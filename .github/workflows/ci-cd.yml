name: FiapCarros CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and Test
        run: ./mvnw -B clean verify

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            rodrigoamora/rodrigo-springboot:latest
            rodrigoamora/rodrigo-springboot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=FiapCarros
            VERSION=1.0

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true  # Ativa logs detalhados
          command_timeout: "20m"
          connect_timeout: "60s"
          use_insecure_cipher: true
          script_stop: true
          script: |
            # Garantir que o processo não fique pendurado
            set -e
            
            # Verificar se o Docker está rodando
            if ! sudo systemctl is-active --quiet docker; then
              sudo systemctl start docker
            fi
            
            # Garantir permissões do Docker
            sudo usermod -aG docker $USER
            
            if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Criar diretório e baixar docker-compose
            mkdir -p ~/app
            cd ~/app
            
            # Backup e download do novo docker-compose
            cp docker-compose.yml docker-compose.yml.backup 2>/dev/null || true
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Parar e limpar containers
            docker-compose down || true
            docker system prune -f
            
            # Pull e start dos containers
            docker-compose pull
            docker-compose up -d
            
            # Aguardar serviços (com timeout de 5 minutos)
            echo "Aguardando MySQL..."
            timeout 300 bash -c 'until docker exec mysql-service mysqladmin ping -h localhost -p$MYSQL_ROOT_PASSWORD --silent; do sleep 5; done'
            
            echo "Aguardando aplicação..."
            timeout 300 bash -c 'until curl -sf http://localhost:8081/actuator/health; do sleep 5; done'
            
            # Verificação final
            docker-compose ps
            if [ $(docker-compose ps --status running | wc -l) -lt 3 ]; then
            echo "ERRO: Containers não estão rodando corretamente"
            docker-compose logs
            exit 1
            fi
