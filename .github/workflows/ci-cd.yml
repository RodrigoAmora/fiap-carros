name: FiapCarros CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and Test
        run: ./mvnw -B clean verify

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            rodrigoamora/rodrigo-springboot:latest
            rodrigoamora/rodrigo-springboot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=FiapCarros
            VERSION=1.0

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true  # Ativa logs detalhados
          command_timeout: "20m"
          script_stop: true
          script: |
            # Criar diretório se não existir
            mkdir -p ~/app
            
            # Copiar docker-compose
            cp ~/app/docker-compose.yml ~/app/docker-compose.yml.backup || true
            
            # Download do docker-compose mais recente
            curl -o ~/app/docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            
            # Parar containers existentes
            cd ~/app
            docker-compose down || true
            
            # Remover imagens antigas
            docker system prune -f
            
            # Pull da nova imagem
            docker-compose pull
            
            # Subir aplicação e aguardar
            docker-compose up -d
            
            # Aguardar serviços iniciarem
            echo "Aguardando serviços iniciarem..."
            
            # Aguarda MySQL (máximo 5 minutos)
            timeout 300 bash -c 'until docker exec mysql-service mysqladmin ping -h localhost -u root -proot --silent; do echo "Aguardando MySQL..."; sleep 5; done'
            
            # Aguarda aplicação Spring Boot (máximo 5 minutos)
            timeout 300 bash -c 'until curl -f http://localhost:8081/actuator/health; do echo "Aguardando aplicação..."; sleep 5; done'
            
            # Verificar status final
            docker-compose ps
            
            # Mostrar logs em caso de erro
            if [ $(docker-compose ps --status running | wc -l) -lt 3 ]; then
            echo "Erro: Verificando logs..."
            docker-compose logs
            exit 1
            fi

